HOST: http://api.theysay.io/v1

--- TheySay AffectR REST API v1: Documentation ---
---

AffectR REST API is a platform-agnostic service which enables developers to access and mix-and-match our powerful text analysis processors that cover sentiment analysis, speculation detection, part-of-speech 
tagging, dependency parsing, and others. 
If you're building an application that cannot do without serious, state-of-the-art live text analytics but don't want to delve deep into natural language processing,
then this is the API for you. 

Getting started with our API is easy. Explore the API below, and simply [sign up](http://theysay.io/signup) to 
receive a development key. 

Have a question? [Read the FAQ](http://theysay.io/faq) or [contact us](contact@theysayanalytics.com).
Want to see examples of how our analysis can be used? Check out our [Case Studies](http://theysay.io/casestudies).
Want to know more about our technology? Read our [White Papers](http://theysay.io/technology).

&copy; 2012 TheySay Ltd. All Rights Reserved.

Rate Limiting
-------------
By default, AffectR REST API allows API clients to make a limited number of calls in a given hour. In pracice, this policy will affect your usage 
in a number of different ways. The default rate limit for calls to the REST API varies depending on the authorisation method used 
and whether the method itself requires authentication. If your application exceeds the rate limit, it will receive a HTTP `403` error response code.
The following thresholds apply:

* Unauthenticated calls are permitted up to 30 requests per hour.
* Authenticated calls are permitted up to 3500 requests per hour, and are measured against the token submitted with the request.

JSONP
-----
JSONP or "JSON with padding" is a complement to the base JSON data format. You can add 'padding' by 
including the request parameter `callback`. The returned `Content-Type` will be `application/javascript`.

For example `http://api.theysay.io/v1/sentiment?text=...&callback=processSentiment`.

---

--
Sentiment Analysis

Sentiment, a dimension of non-factuality that is closely related to subjectivity/affect/emotion/moods, reflects the following fundamental poles manifesting psychological evaluation:

* good/positive/pros/favourable/desirable/recommended/thumbs up/...
* bad/negative/cons/unfavourable/undesirable/not recommended/thumbs down/...

You can use the Sentiment Analysis service to discover deep, fine-grained sentiments and opinions in text.
The analysis, output by a human-like sentiment reasoning algorithm, captures both explicit "author sentiment" as well as 
general, implicit "reader-sentiment" beyond opinions that ultimately stems from affective commons sense as well as issues and events that are 
generally considered to be good vs. bad in the world. 
The analysis can target multiple structural levels of text ranging from entire documents to individual entity mentions.
The returned analysis includes majority sentiment labels, fine-grained 3-way positive/neutral/negative sentiment scores, 
and other auxiliary fields.
--
Get document-level sentiment information about the text snippet as a whole.
GET /sentiment?text=Angela%20Merkel%20failed%20to%20convince%20the%20Parliament.
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
{
  "sentiment": {
    "label": "NEGATIVE",
    "positive": 0.119,
    "negative": 0.873,
    "neutral": 0.007
  },
  "wordCount": 8
}


Add the `level=sentence` parameter to get sentiment information about each sentence in the text snippet.
GET /sentiment?text=...&level=sentence
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "end": 38,
  "sentenceIndex": 0,
  "sentiment": {
    "confidence": 0.668,
    "label": "POSITIVE",
    "positive": 0.787,
    "negative": 0.16,
    "neutral": 0.053
  },
  "start": 0,
  "text": "The new French President Francois Hollande wants a \" growth pact \" in Europe - a set of reforms designed to boost European economies and mitigate the pain caused by government spending cuts across the continent ."
}, {
  "end": 68,
  "sentenceIndex": 1,
  "sentiment": {
    "confidence": 0.614,
    "label": "NEGATIVE",
    "positive": 0.347,
    "negative": 0.627,
    "neutral": 0.026 
  },
  "start": 37,
  "text": "All the bad loans made by eurozone banks may need to be cleaned up ( by injecting money into the banks ) because many national governments probably can not afford it ."
}]


Add the `level=entity` parameter to get sentiment information about each individual entity mentioned in the text snippet.
GET /sentiment?text=...&level=entity
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "end": 21,
  "headNoun": "Obama",
  "headNounIndex": "1",
  "namedEntityTypes": ["PEOPLE"],
  "salience": 0.9,
  "sentenceIndex": 0,
  "sentiment": {
    "label": "POSITIVE",
    "positive": 0.838,
    "negative": 0.0,
    "neutral": 0.161,
    "confidence": 0.729
  },
  "start": 0,
  "sentence": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust .",
  "sentenceHtml": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust .",
  "text": "President Obama",
  "words": ["President Obama", "Obama"]
}, {
  "end": 21,
  "headNoun": "Obama",
  "headNounIndex": "1",
  "namedEntityTypes": ["LOCATION"],
  "salience": 0.9,
  "sentenceIndex": 0,
  "sentiment": {
    "label": "POSITIVE",
    "positive": 0.838,
    "negative": 0.0,
    "neutral": 0.161,
    "confidence": 0.729
  },
  "start": 0,
  "sentence": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust .",
  "sentenceHtml": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust .",
  "text": "President Obama",
  "words": ["President Obama", "Obama"]
}]


Add the `level=entityrelation` parameter to get sentiment information about how pairs of entities are related in the text snippet.
GET /sentiment?text=...&level=entityrelation
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "entity1": {
    "head": "Obama"
    "headIndex": 0,
    "text": "President Obama"
  },
  "entity2": {
    "head": "Merkel"
    "headIndex": 0,
    "text": "Angela Merkel"
  },
  "salience": 0.66,
  "sentiment": {
    "confidence": 0.729
    "label": "NEGATIVE",
    "positive": 0,
    "negative": 0.161,
    "neutral": 0.838
  },
  "sentence": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust .",
  "sentenceHtml": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust ."
}]


Add the `level=word` parameter to get information about the temporal development (or flow) of sentiment through the text snippet.
For each word in the text snippet, contextual sentence-level sentiment labels are provided.
GET /sentiment?text=I%20really%20like%20theysay&level=word
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.0
  },
  "wordIndex": 0,
  "text": "I"
}, {
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.0170000000000001
  },
  "wordIndex": 1,
  "text": "really"
}, {
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.033
  },
  "wordIndex": 2,
  "text": "like"
}, {
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.05
  },
  "wordIndex": 3,
  "text": "theysay"
}]


--
Speculation Detection
Speculative content refers directly or indirectly to any 'irrealis' events that are yet to happen. 
Speculative expressions can hence cover events as diverse as predictions, plans, wanting, wishes, waiting, and risks and warnings, to name a few.      
This service detects speculative expressions at the document and sentence level.
The returned analysis contains only identified speculative content.
Any detected subtypes of speculation are denoted with a dot character (e.g. SPECULATION.SUBTYPE).
--
Get an overall speculation score and individual speculation types from a text snippet.
GET /speculation?text=I%20might%20buy%20macbooks
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "speculationScore": 0.75,
  "speculationTypes": ["SPECULATION", "SPECULATION.PLAN"]
}]


Add the `level=sentence` parameter to get speculation types for each sentence in the text snippet.
GET /speculation?text=...&level=sentence
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "end": 3,
  "sentenceIndex": 0,
  "speculationType": "",
  "start": 6,
  "text": "I spotted this message on Twitter."
},
{
  "end": 7,
  "sentenceIndex": 1,
  "speculationType": "SPECULATION.WARNING",
  "start": 0,
  "text": "Laptops come with huge health risks!"
}]


--
Named Entity Recognition
This service detects expressions in the text snippet that refer explicitly or implicitly to
people and humans in general (PEOPLE); places and locations (LOCATION); organisations and companies (ORGANISATION);
times and dates (TIMEDATE); and monetary issues (MONEY).
For each identified expression (which can be simple and complex Noun Phrases, Adjective Phrases, or Adverb Phrases), the detected Named Entity types are ranked by their salience (most salient first).
--
GET /namedentity?text=yourText&level=phrase
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "head": "Hollande",
  "headIndex": 5,
  "start": 0,
  "end": 5,
  "sentence": "The new French President Francois Hollande wants a '' growth pact '' in Europe - a set of reforms designed to boost European economies and mitigate the pain caused by government spending cuts across the continent .",
  "sentenceHtml": "The new French President Francois Hollande wants a '' growth pact '' in Europe - a set of reforms designed to boost European economies and mitigate the pain caused by government spending cuts across the continent .",
  "text": "The new French President Francois Hollande",
  "namedEntityTypes": ["PEOPLE"]
}, {
  "head": "area",
  "headIndex": 7,
  "start": 6,
  "end": 15,
  "sentence": "The three lifeboats have been searching an area 25 miles ( 40km ) south of Wick , in the Beatrice oil field , for the two crew who remain missing .",
  "sentenceHtml": "The three lifeboats have been searching an area 25 miles ( 40km ) south of Wick , in the Beatrice oil field , for the two crew who remain missing .",
  "text": "an area 25 miles ( 40km ) south of Wick",
  "namedEntityTypes": ["LOCATION"]
}, {
  "head": "Co-op",
  "headIndex": 1,
  "start": 0,
  "end": 1,
  "sentence": "The Co-op will pay GBP350m upfront and up to an additional # 400m based on the performance of the combined business .",
  "sentenceHtml": "The Co-op will pay GBP350m upfront and up to an additional # 400m based on the performance of the combined business .",
  "text": "The Co-op",
  "namedEntityTypes": ["ORGANISATION"]
}, {
  "head": "shares",
  "headIndex": 31,
  "start": 30,
  "end": 31,
  "sentence": "The resolution for change was filed by Christian Brothers Investment Services ( CBIS ) and members of the Local Authority Pension Fund Forum ( LAPFF ) , organizations that own B shares .",
  "sentenceHtml": "The resolution for change was filed by Christian Brothers Investment Services ( CBIS ) and members of the Local Authority Pension Fund Forum ( LAPFF ) , organizations that own B shares .",
  "text": "B shares",
  "namedEntityTypes": ["MONEY"]
}]


--
Part-of-Speech Tagging
This service assigns word class types to individual words in the text snippet.
The [tagset]() used is largely compatible with the [Penn Treebank Tagset](http://www.cis.upenn.edu/~treebank/).
--
GET /postag?text=I%20might%20buy%20a%20MacBookPro.
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "posTag": "PRP",
  "posTaggedWord": "I/PRP",
  "sentenceIndex": 0,
  "stem": "I|i",
  "text": "I",
  "wordIndex": 0
}, {
  "posTag": "MD",
  "posTaggedWord": "might/MD",
  "sentenceIndex": 0,
  "stem": "might|may",
  "text": "might",
  "wordIndex": 1
}, {
  "posTag": "VB",
  "posTaggedWord": "buy/VB",
  "sentenceIndex": 0,
  "stem": "buy",
  "text": "buy",
  "wordIndex": 2
}, {
  "posTag": "DT",
  "posTaggedWord": "a/DT",
  "sentenceIndex": 0,
  "stem": "a",
  "text": "a",
  "wordIndex": 3
}, {
  "posTag": "NNP",
  "posTaggedWord": "MacBookPro/NNP",
  "sentenceIndex": 0,
  "stem": "MacBookPro|macbookpro",
  "text": "MacBookPro",
  "wordIndex": 4
}, {
  "posTag": ".",
  "posTaggedWord": "./.",
  "sentenceIndex": 0,
  "stem": ".",
  "text": ".",
  "wordIndex": 5
}]


--
Dependency Parsing
This service analyses the grammatical structure of each sentence in the text snippet.
For each sentence, typed syntactic dependencies between individual words are provided.
The parses and the [typed dependencies]() used resemble the labels and types described in the [Cambridge Grammar of the English Language](http://www.cambridge.org/uk/linguistics/cgel/).
--
GET /depparse?text=I%20got%20a%20new%20camera%20which%20takes%20brilliant%20photos.
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "dependency": {
    "predicate": "nsubj(got, I)",
    "relation": "nsubj"
  },
  "dependent": {
    "text": "I",
    "stem": "I|i",
    "wordIndex": 0
  },
  "governor": {
    "text": "got",
    "stem": "got|get",
    "wordIndex": 1
  }
}, {
  "dependency": {
    "predicate": "(root, got)",
    "relation": ""
  },
  "dependent": {
    "text": "got",
    "stem": "got|get",
    "wordIndex": 1
  }
}, {
  "dependency": {
    "predicate": "det(camera, a)",
    "relation": "det"
  },
  "dependent": {
    "text": "a",
    "stem": "a",
    "wordIndex": 2
  },
  "governor": {
    "text": "camera",
    "stem": "camera",
    "wordIndex": 4
  }
}, {
  "dependency": {
    "predicate": "amod(camera, new)",
    "relation": "amod"
  },
  "dependent": {
    "text": "new",
    "stem": "new",
    "wordIndex": 3
  },
  "governor": {
    "text": "camera",
    "stem": "camera",
    "wordIndex": 4
  }
}, {
  "dependency": {
    "predicate": "dobj(got, camera)",
    "relation": "dobj"
  },
  "dependent": {
    "text": "camera",
    "stem": "camera",
    "wordIndex": 4
  },
  "governor": {
    "text": "got",
    "stem": "got|get",
    "wordIndex": 1
  }
}, {
  "dependency": {
    "predicate": "rel(takes, which)",
    "relation": "rel"
  },
  "dependent": {
    "text": "which",
    "stem": "which",
    "wordIndex": 5
  },
  "governor": {
    "text": "takes",
    "stem": "takes|take",
    "wordIndex": 6
  }
}, {
  "dependency": {
    "predicate": "rcmod(camera, takes)",
    "relation": "rcmod"
  },
  "dependent": {
    "text": "takes",
    "stem": "takes|take",
    "wordIndex": 6
  },
  "governor": {
    "text": "camera",
    "stem": "camera",
    "wordIndex": 4
  }
}, {
  "dependency": {
    "predicate": "amod(photos, brilliant)",
    "relation": "amod"
  },
  "dependent": {
    "text": "brilliant",
    "stem": "brilliant",
    "wordIndex": 7
  },
  "governor": {
    "text": "photos",
    "stem": "photos|photo",
    "wordIndex": 8
  }
}, {
  "dependency": {
    "predicate": "dobj(takes, photos)",
    "relation": "dobj"
  },
  "dependent": {
    "text": "photos",
    "stem": "photos|photo",
    "wordIndex": 8
  },
  "governor": {
    "text": "takes",
    "stem": "takes|take",
    "wordIndex": 6
  }
}, {
  "dependency": {
    "predicate": "(root, .)",
    "relation": ""
  },
  "dependent": {
    "text": ".",
    "stem": ".",
    "wordIndex": 9
  }
}]