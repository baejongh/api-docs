HOST: http://api.theysay.io/

--- TheySay REST API Resources v1 ---
---

Getting started wit TheySay is easy. Explore the REST API below, and [sign up](http://theysay.io/signup) to 
receive a development key. Have a question? [Read the FAQ](http://theysay.io/faq). Don't know what to 
build? Check out our [Case Studies](http://theysay.io/casestudies).

The REST API enables developers to access our powerful text analysis, including sentiment detection, part-of-speech 
tagging, speculation detection and named entity detection. If you're building application that leverages text analysis,
then this is the API for you. Imagine building a hotel booking app: bathroom sentiment, entities surrounding the hotel, 
discover sentiment around to topics you did't know existed - all with a few RESTful API calls.

Rate Limiting
-------------
Unauthenticated calls are permitted 150 requests per hour. If your application is being rate-limited by
the REST API it will receive a HTTP `403` response code.

JSONP
-----
JSONP or "JSON with padding" is a complement to the base JSON data format. You can add 'padding' by 
including the request parameter `callback`. The returned `Content-Type` will be `application/javascript`. 
For example `http://api.theysay.io/v1/sentiment?text=...&callback=processSentiment`.

---

--
Sentiment Analysis

Detects sentiments and opinions in text using deep sentiment reasoning and gradient sentiment scores.
--
Get the sentiment from text.
GET /v1/sentiment?text=I%20really%20like%20theysay
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
{
  "sentiment": {
    "label": "POSITIVE",
    "positive": 0.933,
    "negative": 0.0,
    "neutral": 0.066
  },
  "wordCount": 4
}

Get the sentiment for each sentence in a piece of text. Add the `level=sentence` parameter.
GET /v1/sentiment?text=...&level=sentence
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "sentiment": {
    "label": "POSITIVE",
    "positive": 0.838,
    "negative": 0.0,
    "neutral": 0.161,
    "confidence": 0.729
  },
  "start": 0,
  "end": 21,
  "sentenceIndex": 0,
  "text": "Under it , an individual resigns from their company and any salary they subsequently receive is paid to an offshore trust ."
}, {
  "sentiment": {
    "label": "NEGATIVE",
    "positive": 0.031,
    "negative": 0.927,
    "neutral": 0.040,
    "confidence": 0.575
  },
  "start": 22,
  "end": 52,
  "sentenceIndex": 1,
  "text": "The individual then receives a small amount of that as salary and the rest as a loan , which because it can technically be recalled , does not attract tax ."
}]

Get the sentiment for each word in a piece of text. Add the `level=word` parameter.
GET /v1/sentiment?text=I%20really%20like%20theysay&level=word
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.0
  },
  "wordIndex": 0,
  "text": "I"
}, {
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.0170000000000001
  },
  "wordIndex": 1,
  "text": "really"
}, {
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.033
  },
  "wordIndex": 2,
  "text": "like"
}, {
  "sentiment": {
    "label": "POSITIVE",
    "timelineY": 1.05
  },
  "wordIndex": 3,
  "text": "theysay"
}]


--
Speculation Detection
Detects speculative expressions in text.
--
Get the speculative expressions from a source text.
GET /v1/speculation?text=I%20might%20buy%20macbooks
> Accept: application/json
< 200
< Access-Control-Allow-Origin:*
< Content-Length:91
< Content-Type: application/json
[{
  "start": 0,
  "end": 3,
  "sentenceIndex": 0,
  "speculationType": "SPECULATION",
  "text": "I might buy macbooks"
}]